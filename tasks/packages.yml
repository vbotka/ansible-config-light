---
- name: "Packages: Select lists"
  ansible.builtin.set_fact:
    my_packages_apt: "{{ cl_packages.values() | list | json_query('[?module == `apt`]') }}"
    my_packages_snap: "{{ cl_packages.values() | list | json_query('[?module == `snap`]') }}"
    my_packages_yum: "{{ cl_packages.values() | list | json_query('[?module == `yum`]') }}"
    my_packages_pkgng: "{{ cl_packages.values() | list | json_query('[?module == `pkgng`]') }}"
    my_packages_package: "{{ cl_packages.values() | list | json_query('[?module == `package`]') }}"
    my_packages_undef: "{{ cl_packages.values() | list | selectattr('module', 'undefined') }}"

- name: "Packages: Create list defaulted to module package"
  ansible.builtin.set_fact:
    my_packages_default: "{{ my_packages_package + my_packages_undef }}"

- name: "Packages: Debug"
  ansible.builtin.debug:
    msg: |
      cl_packages:
        {{ cl_packages | to_nice_yaml(indent=2) | indent(2) }}
      my_packages_apt:
        {{ my_packages_apt | to_yaml(indent=2) | indent(2) }}
      my_packages_snap:
        {{ my_packages_snap | to_yaml(indent=2) | indent(2) }}
      my_packages_yum:
        {{ my_packages_yum | to_yaml(indent=2) | indent(2) }}
      my_packages_pkgng:
        {{ my_packages_pkgng | to_yaml(indent=2) | indent(2) }}
      my_packages_package:
        {{ my_packages_package | to_yaml(indent=2) | indent(2) }}
      my_packages_undef:
        {{ my_packages_undef | to_yaml(indent=2) | indent(2) }}
      my_packages_default:
        {{ my_packages_default | to_yaml(indent=2) | indent(2) }}
  when: cl_debug | bool

- name: FreeBSD packages
  when:
    - my_packages_pkgng | length > 0
    - ansible_os_family == 'FreeBSD'
    - freebsd_install_method | lower == 'packages'

  block:
    - name: "Packages: Manage FreeBSD packages"
      community.general.pkgng:
        name: "{{ item.name }}" # list / elements=string / required
        state: "{{ item.state | d(omit) }}"
        annotation: "{{ item.annotation | d(omit) }}"
        autoremove: "{{ freebsd_pkgng_autoremove | d(omit) }}"
        cached: "{{ freebsd_pkgng_cached | d(omit) }}"
        chroot: "{{ freebsd_pkgng_chroot | d(omit) }}"
        ignore_osver: "{{ freebsd_pkgng_ignore_osver | d(omit) }}"
        jail: "{{ freebsd_pkgng_jail | d(omit) }}"
        pkgsite: "{{ freebsd_pkgng_pkgsite | d(omit) }}"
        rootdir: "{{ freebsd_pkgng_rootdir | d(omit) }}"
      loop: "{{ my_packages_pkgng }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug FreeBSD packages"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool

- name: FreeBSD ports
  when:
    - my_packages_pkgng | length > 0
    - ansible_os_family == 'FreeBSD'
    - freebsd_install_method | lower == 'ports'

  block:
    - name: "Packages: Manage FreeBSD ports"
      community.general.portinstall:
        name: "{{ item.1 }}" # string / required
        state: "{{ item.0.state | d(omit) }}"
        use_packages: "{{ item.0.use_packages | d(freebsd_use_packages) }}"
      loop: "{{ my_packages_pkgng | d([]) | subelements('name') }}"
      loop_control:
        label: "{{ item.1 }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug FreeBSD ports"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool

- name: Linux snap
  when:
    - my_packages_snap | length > 0
    - ansible_os_family in cl_supported_linux_family

  block:
    - name: "Packages: Find snap"
      ansible.builtin.find:
        paths: "{{ cl_snap_paths }}"
        patterns: "{{ cl_snap_patterns }}"
      register: cl_find_snap

    - name: "Packages: Debug find snap"
      ansible.builtin.debug:
        var: cl_find_snap
      when: cl_debug | bool

    - name: "Packages: Fail if snap is missing"
      ansible.builtin.fail:
        msg: "[ERR] snap is missing."
      when: cl_find_snap.matched == 0

    - name: "Packages: Manage Linux packages by snap module"
      community.general.snap:
        name: "{{ item.name }}" #  list / elements=string
        state: "{{ item.state | d(omit) }}"
      loop: "{{ my_packages_snap }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug Linux snap"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool

- name: Linux package
  when:
    - my_packages_default | length > 0
    - ansible_os_family in cl_supported_linux_family

  block:
    - name: "Packages: Manage Linux packages by package module"
      ansible.builtin.package:
        name: "{{ item.1 }}" # string / required
        state: "{{ item.0.state | d('present') }}"
        use: "{{ item.0.use | d('auto') }}"
      loop: "{{ my_packages_default | d([]) | subelements('name') }}"
      loop_control:
        label: "{{ item.1 }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug Linux package"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool

- name: Linux yum
  when:
    - my_packages_yum | length > 0
    - ansible_os_family == 'RedHat'

  block:
    - name: "Packages: Manage Linux packages by yum module"
      ansible.builtin.dnf:
        name: "{{ item.name }}" #  list / elements=string
        state: "{{ item.state | d(omit) }}"
        use_backend: "{{ item.use | d(omit) }}"
      loop: "{{ my_packages_yum }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug Linux yum"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool

- name: Linux apt
  when:
    - my_packages_apt | length > 0
    - ansible_os_family == 'Debian'

  # TODO: Complete parameters of modules

  # EOF
  block:
    - name: "Packages: Manage Linux packages by apt module"
      ansible.builtin.apt:
        name: "{{ item.name }}" #  list / elements=string
        state: "{{ item.state | d(omit) }}"
        purge: "{{ item.purge | d(omit) }}"
      loop: "{{ my_packages_apt }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"

    - name: "Packages: Debug Linux apt"
      ansible.builtin.debug:
        var: result
      when: cl_debug | bool
