---

- name: "packages: Debug"
  debug:
    msg: "{{ cl_packages.values()|list }}"
  when: cl_debug|bool

# FreeBSD packages - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Manage FreeBSD packages"
  block:
    - name: "packages: Manage FreeBSD packages"
      pkgng:
        name: "{{ item.name }}"  # list / elements=string / required
        state: "{{ item.state|default(omit) }}"
        annotation: "{{ item.annotation|default(omit) }}"
        autoremove: "{{ freebsd_pkgng_autoremove|default(omit) }}"
        cached: "{{ freebsd_pkgng_cached|default(omit) }}"
        chroot: "{{ freebsd_pkgng_chroot|default(omit) }}"
        ignore_osver: "{{ freebsd_pkgng_ignore_osver|default(omit) }}"
        jail: "{{ freebsd_pkgng_jail|default(omit) }}"
        pkgsite: "{{ freebsd_pkgng_pkgsite|default(omit) }}"
        rootdir: "{{ freebsd_pkgng_rootdir|default(omit) }}"
      loop: "{{ cl_packages.values()|list }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
    - name: "packages: Debug FreeBSD packages"
      debug:
        var: result
      when: cl_debug|bool
  when:
    - ansible_os_family == "FreeBSD"
    - freebsd_install_method|lower == "packages"

# FreeBSD ports - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Manage FreeBSD ports"
  block:
    - name: "packages: Manage FreeBSD ports"
      portinstall:
        name: "{{ item.1 }}"  # string / required
        state: "{{ item.0.state|default(omit) }}"
        use_packages: "{{ item.0.use_packages|default(freebsd_use_packages) }}"
      with_subelements:
        - "{{ cl_packages.values()|list }}"
        - name
      loop_control:
        label: "{{ item.1 }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
    - name: "packages: Debug FreeBSD ports"
      debug:
        var: result
      when: cl_debug|bool
  when:
    - ansible_os_family == "FreeBSD"
    - freebsd_install_method|lower == "ports"

# Linux snap - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Find snap"
  block:
    - name: "packages: Find snap"
      find:
        paths: "{{ cl_snap_paths }}"
        patterns: "{{ cl_snap_patterns }}"
      register: _find_snap
    - name: "packages: Debug find snap"
      debug:
        var: _find_snap
      when: cl_debug|bool
    - name: "packages: Fail if snap is missing"
      fail:
        msg: "[ERROR] snap not installed."
      when:
        - cl_snap_missing_fatal|bool
        - _find_snap.matched == 0
        - cl_packages.values()|list|json_query('[?module == `snap`]')|length > 0
  when: ansible_os_family == "RedHat" or
        ansible_os_family == "Debian"
- name: "packages: Manage Linux packages by snap module"
  block:
    - name: "packages: Manage Linux packages by snap module"
      snap:
        name: "{{ item.name }}"  #  list / elements=string
        state: "{{ item.state|default(omit) }}"
      loop: "{{ cl_packages.values()|list|json_query('[?module == `snap`]') }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
      when: item.module|default('package') == 'snap'
    - name: "packages: Debug Linux snap"
      debug:
        var: result
      when: cl_debug|bool
  when:
    - _find_snap.matched != 0
    - ansible_os_family == "RedHat" or
      ansible_os_family == "Debian"

# Linux package - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Manage Linux packages by package module"
  block:
    - name: "packages: Manage Linux packages by package module"
      package:
        name: "{{ item.1 }}"  # string / required
        state: "{{ item.0.state|default('present') }}"
        use: "{{ item.0.use|default('auto') }}"
      with_subelements:
        - "{{ cl_packages.values()|list }}"
        - name
      loop_control:
        label: "{{ item.1 }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
      when: item.0.module|default('package') == 'package'
    - name: "packages: Debug Linux package"
      debug:
        var: result
      when: cl_debug|bool
  when: ansible_os_family == "RedHat" or
        ansible_os_family == "Debian"

# Linux yum - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Manage Linux packages by yum module"
  block:
    - name: "packages: Manage Linux packages by yum module"
      yum:
        name: "{{ item.name }}"  #  list / elements=string
        state: "{{ item.state|default(omit) }}"
        use_backend: "{{ item.use|default(omit) }}"
      loop: "{{ cl_packages.values()|list }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
      when: item.module|default('package') == 'yum'
    - name: "packages: Debug Linux yum"
      debug:
        var: result
      when: cl_debug|bool
  when: ansible_os_family == "RedHat" or
        ansible_os_family == "Debian"

# Linux apt - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "packages: Manage Linux packages by apt module"
  block:
    - name: "packages: Manage Linux packages by apt module"
      apt:
        name: "{{ item.name }}"  #  list / elements=string
        state: "{{ item.state|default(omit) }}"
        purge: "{{ item.purge|default(omit) }}"
      loop: "{{ cl_packages.values()|list }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      until: result is succeeded
      retries: "{{ install_retries }}"
      delay: "{{ install_delay }}"
      when: item.module|default('package') == 'apt'
    - name: "packages: Debug Linux apt"
      debug:
        var: result
      when: cl_debug|bool
  when: ansible_os_family == "RedHat" or
        ansible_os_family == "Debian"

# TODO: Complete parameters of modules

# EOF
...
